/*
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
  
import java.util.*;
import java.lang.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.service.LocalDispatcher;
import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import java.sql.Timestamp;

LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute("dispatcher");
projectId = parameters.get("projectId");
userLogin = session.getAttribute("userLogin");

ganttList = new LinkedList(); // resulting list

//project info
result = dispatcher.runSync("getProject", UtilMisc.toMap("projectId", projectId, "userLogin", userLogin));
project = result.get("projectInfo");
if (project.get("startDate") != null) 
    context.put("chartStart",project.get("startDate"));
else
    context.put("chartStart", UtilDateTime.nowTimestamp()); // default todays date
if (project.get("completionDate") != null )         
    context.put("chartEnd",project.get("completionDate"));
else
    context.put("chartEnd", UtilDateTime.addDaysToTimestamp(UtilDateTime.nowTimestamp(), 14)); // default 14 days long

// phase list
result = dispatcher.runSync("getProjectPhaseList", UtilMisc.toMap("userLogin", userLogin, "projectId", projectId));
phases = result.get("phaseList");
if (phases != null) {
    p = phases.iterator();
    while (p.hasNext()) {
        phase = p.next();
        ganttList.add(phase);
        tasks = delegator.findByAnd("WorkEffort", UtilMisc.toMap("workEffortParentId", phase.get("phaseId")));
        if (tasks != null) {
            t = tasks.iterator();
            while (t.hasNext()) {
                task = t.next();
                ganttList.add(task);
            }
        }
    }
    // add sort?
    context.put("tasks", ganttList);
}
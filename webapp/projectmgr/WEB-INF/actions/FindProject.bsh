/*
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
  
import java.util.*;
import java.lang.*;
import java.util.Iterator;
import javolution.util.FastMap;
import java.math.BigDecimal;

import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.condition.EntityConditionList;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;


import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import java.sql.Timestamp;

fromDate = parameters.get("fromDate");
workEffortName = parameters.get("workEffortName");
projectId = parameters.get("projectId");
userLogin = parameters.get("userLogin");

// entry conditions    
entryCondition = new LinkedList();    
if (UtilValidate.isNotEmpty(fromDate)) {
    entryCondition.add(new EntityExpr("createdDate", EntityOperator.GREATER_THAN, fromDate + " 00:00:00.0"));
}    
if (UtilValidate.isNotEmpty(workEffortName)) {
    entryCondition.add(new EntityExpr("workEffortName", EntityOperator.LIKE, "%" + workEffortName + "%"));
}    

// get subprojects for a project
if (UtilValidate.isNotEmpty(projectId)) {
    entryCondition.add(new EntityExpr("workEffortParentId", EntityOperator.EQUALS, projectId));
}    

// create project list.
exprList = UtilMisc.toList(
    new EntityExpr("workEffortTypeId", EntityOperator.EQUALS, "PROJECT"));
if (UtilValidate.isNotEmpty(entryCondition)) exprList.addAll(entryCondition);
condition = new EntityConditionList(exprList, EntityOperator.AND);
projectIds = delegator.findByCondition("WorkEffort", condition, UtilMisc.toList("workEffortId", "workEffortName"), UtilMisc.toList("workEffortName DESC"));

// retrieve all project data with the service
projects = new LinkedList();    
p = projectIds.iterator();
while(p.hasNext()) {
    projectId = p.next();
    serviceResult = dispatcher.runSync("getProject", UtilMisc.toMap("userLogin", userLogin, "projectId", projectId.getString("workEffortId")));
    projects.add(serviceResult.get("projectInfo"));
}

context.put("projects", projects);

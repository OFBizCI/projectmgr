/*
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
  
import java.util.*;
import java.lang.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.util.EntityUtil;
import javolution.util.FastMap;

workEffortIdFrom = parameters.get("workEffortIdFrom");

workEffortTypeId = parameters.get("workEffortTypeId");

if(workEffortIdFrom != null) {
    List workEffortAssocs = delegator.findByAnd("WorkEffortAssocView", UtilMisc.toMap("workEffortIdFrom", workEffortIdFrom, "workEffortAssocTypeId", "WORK_EFF_BREAKDOWN"));
    if(workEffortAssoc != null) {
        List childProjects = new LinkedList();
        List childTasks = new LinkedList();
        List childPhases = new LinkedList();
        itr = workEffortAssocs.iterator();
        while(itr.hasNext()) {
            GenericValue workEffortAssoc = itr.next();
            workEffortIdTo = workEffortAssoc.get("workEffortIdTo");    
            GenericValue workEffort = delegator.findByPrimaryKey("WorkEffort", UtilMisc.toMap("workEffortId", workEffortIdTo));    
            String workEffortTypeId = workEffort.get("workEffortTypeId");
            if(workEffortTypeId.equals("PROJECT")) {                
                Map projectMap = FastMap.newInstance();
                projectMap.put("currentStatusId", workEffort.getString("currentStatusId"));
                projectMap.put("fromDate", workEffortAssoc.getString("fromDate"));
                projectMap.put("workEffortId", workEffort.getString("workEffortId"));
                projectMap.put("workEffortName", workEffort.getString("workEffortName"));
                projectMap.put("priority", workEffort.getString("priority"));
                projectMap.put("workEffortToActualStartDate", workEffortAssoc.getString("workEffortToActualStartDate"));
                projectMap.put("workEffortToActualCompletionDate", workEffortAssoc.getString("workEffortToActualCompletionDate"));
                projectMap.put("description", workEffort.getString("description"));
                projectMap.put("workEffortTypeId", workEffort.getString("workEffortTypeId"));
                projectMap.put("workEffortPurposeTypeId", workEffort.getString("workEffortPurposeTypeId"));
                projectMap.put("workEffortAssocTypeId", "WORK_EFF_BREAKDOWN");
                childProjects.add(projectMap);                
                context.put("projects", childProjects);        
            }
            else {
                if(workEffortTypeId.equals("TASK")) {                    
                    Map taskMap = FastMap.newInstance();
                    taskMap.put("currentStatusId", workEffort.getString("currentStatusId"));
                    taskMap.put("fromDate", workEffortAssoc.getString("fromDate"));
                    taskMap.put("workEffortId", workEffort.getString("workEffortId"));
                    taskMap.put("workEffortName", workEffort.getString("workEffortName"));
                    taskMap.put("priority", workEffort.getString("priority")); 
                    taskMap.put("workEffortToActualStartDate", workEffortAssoc.getString("workEffortToActualStartDate"));
                    taskMap.put("workEffortToActualCompletionDate", workEffortAssoc.getString("workEffortToActualCompletionDate"));
                    taskMap.put("description", workEffort.getString("description"));
                    taskMap.put("workEffortTypeId", workEffort.getString("workEffortTypeId"));
                    taskMap.put("workEffortPurposeTypeId", workEffort.getString("workEffortPurposeTypeId"));
                    taskMap.put("workEffortAssocTypeId", "WORK_EFF_BREAKDOWN");
                    childTasks.add(taskMap);                    
                    context.put("tasks", childTasks);
                }
                else {
                    if(workEffortTypeId.equals("PHASE")) {                        
                        Map phaseMap = FastMap.newInstance();
                        phaseMap.put("currentStatusId", workEffort.getString("currentStatusId"));
                        phaseMap.put("fromDate", workEffortAssoc.getString("fromDate"));
                        phaseMap.put("workEffortId", workEffort.getString("workEffortId"));
                        phaseMap.put("workEffortName", workEffort.getString("workEffortName"));
                        phaseMap.put("workEffortToActualStartDate", workEffortAssoc.getString("workEffortToActualStartDate"));
                        phaseMap.put("workEffortToActualCompletionDate", workEffortAssoc.getString("workEffortToActualCompletionDate"));
                        phaseMap.put("description", workEffort.getString("description"));
                        phaseMap.put("workEffortAssocTypeId", "WORK_EFF_BREAKDOWN");
                        phaseMap.put("workEffortTypeId", workEffort.getString("workEffortTypeId"));
                        phaseMap.put("workEffortPurposeTypeId", workEffort.getString("workEffortPurposeTypeId"));
                        childPhases.add(phaseMap);                    
                        context.put("phases", childPhases);
                    }
                }
            }            
        }
    }
}
else {
    if (workEffortTypeId.equals("TASK")) {
        List tasks = delegator.findByAnd("WorkEffort", UtilMisc.toMap("workEffortTypeId", workEffortTypeId));
        List unAssignedTasks = new LinkedList();
        itr = tasks.iterator();
        while (itr.hasNext()) {
            GenericValue task = itr.next();
            workEffortId = task.get("workEffortId");    
            GenericValue workEffortAssoc = EntityUtil.getFirst(delegator.findByAnd("WorkEffortAssoc", UtilMisc.toMap("workEffortIdTo", workEffortId)));
            if (workEffortAssoc == null) {
            unAssignedTasks.add(UtilMisc.toMap("workEffortId", task.getString("workEffortId"),
                                                 "workEffortTypeId", task.getString("workEffortTypeId"),
                                                 "workEffortPurposeTypeId", task.getString("workEffortPurposeTypeId")));
                context.put("tasks", unAssignedTasks);        
            }
        }        
    }
    else {
        List projects = delegator.findByAnd("WorkEffort", UtilMisc.toMap("workEffortTypeId", workEffortTypeId));        
        context.put("projects", projects);
    }
}


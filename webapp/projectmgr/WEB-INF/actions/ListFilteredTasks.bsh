/*
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
  
import java.util.*;
import java.lang.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.base.util.UtilMisc;
import javolution.util.FastMap;

import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import java.sql.Timestamp;

fromDate = parameters.get("fromDate");
thruDate = parameters.get("thruDate");

workEffortTypeId = parameters.get("workEffortTypeId");
workEffortIdFrom = parameters.get("workEffortIdFrom");
findAll = parameters.get("findAll");
if (findAll == null) {
    findAll = "N";
}
if (filterTaskNotAssigned == null) {
filterTaskNotAssigned = "N";
}

if (filterTaskNotAssigned.equals("Y")) {
    workEffortAssocs = delegator.findByAnd("WorkEffortAssoc", UtilMisc.toMap("workEffortIdFrom", workEffortIdFrom));
    if (workEffortAssocs != null) {
        List phases = new LinkedList();
        List tasks = new LinkedList();
        List unassignedTasks = new LinkedList();
        itr = workEffortAssocs.iterator();
        while(itr.hasNext()) {
            GenericValue workEffortAssoc = itr.next();
            workEffortIdTo = workEffortAssoc.get("workEffortIdTo");    
            GenericValue workEffort = delegator.findByPrimaryKey("WorkEffort", UtilMisc.toMap("workEffortId", workEffortIdTo));    
            String workEffortTypeId = workEffort.get("workEffortTypeId");
            if(workEffortTypeId.equals("PHASE")) {
                phases.add(workEffort);                
            }
            if(workEffortTypeId.equals("TASK")) {
                tasks.add(workEffort);
            }
        }
        if(tasks != null && tasks.size()>0) {            
            taskItr = tasks.iterator();
            while(taskItr.hasNext()) {
                boolean outerFlag = false;
                boolean innerFlag = false;
                GenericValue task = taskItr.next();                
                if(phases != null && phases.size()>0) {                    
                    phaseItr = phases.iterator();            
                    while(phaseItr.hasNext()) {
                        GenericValue phase = phaseItr.next();                        
                        workEffortIdFrom = phase.get("workEffortId");
                        workEffortAssocs = delegator.findByAnd("WorkEffortAssoc", UtilMisc.toMap("workEffortIdFrom", workEffortIdFrom));
                        if(workEffortAssocs != null) {                            
                            workEffortAssocItr = workEffortAssocs.iterator();                            
                            while(workEffortAssocItr.hasNext()) {
                                GenericValue workEffortAssoc = workEffortAssocItr.next();
                                if(workEffortAssoc.get("workEffortIdTo").equals(task.get("workEffortId"))) {
                                    innerFlag = true;
                                    outerFlag = true;
                                }
                                if(innerFlag) {
                                    break;
                                }
                            }                             
                        }
                        if(outerFlag) {
                            break;
                        }
                    }
                    if(!innerFlag) {                            
                        Map taskMap = FastMap.newInstance();
                        taskMap.putAll((Map) task);                        
                        unassignedTasks.add(taskMap);
                    }
                } else {
                    Map taskMap = FastMap.newInstance();
                    taskMap.putAll((Map) task);                    
                    unassignedTasks.add(taskMap);
                }
            }            
            context.put("tasks", unassignedTasks);
        }
    }    
}else {
    if(workEffortTypeId.equals("TASK")) {
        if ( !(UtilValidate.isEmpty(fromDate) || UtilValidate.isEmpty(thruDate))) {
            conditions = UtilMisc.toList(new EntityExpr("workEffortTypeId", EntityOperator.EQUALS, "TASK"));
            conditions.add(new EntityExpr("createdStamp", EntityOperator.GREATER_THAN_EQUAL_TO, fromDate ));
            conditions.add(new EntityExpr("createdStamp", EntityOperator.LESS_THAN_EQUAL_TO, thruDate ));
            allConditions = new EntityConditionList( conditions, EntityOperator.AND );
            orderBy = UtilMisc.toList("createdStamp DESC");
            listProjects = delegator.findList("WorkEffort", allConditions, null, orderBy, null, true);
            List projects = new LinkedList();
            itr = listProjects.iterator();
            while (itr.hasNext()) {
                GenericValue project = itr.next();
                workEffortId = project.get("workEffortId");    
                GenericValue workEffortAssoc = EntityUtil.getFirst(delegator.findByAnd("WorkEffortAssoc", UtilMisc.toMap("workEffortIdTo", workEffortId)));
                if (workEffortAssoc == null) {
                    projects.add(UtilMisc.toMap("workEffortId", project.getString("workEffortId"),
                                         "workEffortName", project.getString("workEffortName"),  
                                         "workEffortTypeId", project.getString("workEffortTypeId"),
                                         "workEffortPurposeTypeId", project.getString("workEffortPurposeTypeId")));
                    context.put("projects", projects);        
                }
            }
        } else { 
            if (findAll.equals("Y")){
                List workEffortAssocs = delegator.findByAnd("WorkEffortAssocView", UtilMisc.toMap("workEffortIdFrom", workEffortIdFrom));
                List tasks = new LinkedList();
                if(workEffortAssocs != null) {
                    itr = workEffortAssocs.iterator();
                    while (itr.hasNext()) {
                        GenericValue workEffortAssoc = itr.next();
                        GenericValue task = delegator.findByPrimaryKey("WorkEffort", UtilMisc.toMap("workEffortId", workEffortAssoc.get("workEffortIdTo")));
                        workEffortTypeId = task.get("workEffortTypeId");
                        if(workEffortTypeId.equals("TASK")) {                        
                            Map taskMap = FastMap.newInstance();
                            taskMap.putAll((Map) task);
                            taskMap.putAll((Map) workEffortAssoc);
                            tasks.add(taskMap);
                            context.put("tasks", tasks);
                        }                    
                    }
                }
            } else {
                List tasks = null; 
                context.put("tasks", tasks);
            }
        }
    } else {
        List unassignedTasks = null;
        context.put("tasks", unassignedTasks);
    }    
}
